<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[博客优化--解决跨域请求问题、gulp压缩、站点图片添加水印]]></title>
    <url>%2Fblog-08.html</url>
    <content type="text"><![CDATA[在上一篇博客有提到，个人音乐播放器在网站使用https协议访问时无法获取数据，其原因是后台搭建的音乐数据接口是http协议的，若博客使用https协议就会造成网络协议不同，浏览器同源策略是不允许这样的跨域请求。（除了协议不同会造成跨域，域名、端口与当前页面地址不同也为跨域） 本篇文章将做下列事情 解决跨域请求问题 使用gulp压缩代码提升性能 站点图片添加水印 解决跨域请求问题当用HTTP协议访问本站点时会出现如图报错：无法通过http协议获取最近音乐播放数据 解决思路： 获取SSL证书，将请求换成https协议 通过Nginx反向代理音乐接口 首先创建一个域名解析记录，这里我创建一个以music为开头的二级域名，并将记录值指向服务器IP地址 获取SSL免费证书并下载证书到本地 连接远程服务器，复制SSL证书到Nginx的conf目录，然后对nginx.conf文件进行配置（因为我是使用Nginx代理服务器，所以我这里选择Nginx证书） (备注： http://localhost:163 是我在后台开启的音乐数据接口) 完成后将js音乐数据请求url换成新的url : https://music.sharelab.club 至此博客跨域请求问题解决了。 使用gulp压缩代码提升站点性能什么是gulp?gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。 (注意： gulp是基于node环境,所以要首先安装nodejs) 安装gulp及其插件 gulp-htmlclean // 清理html gulp-htmlmin // 压缩html gulp-minify-css // 压缩css gulp-uglify // 混淆js gulp-imagemin // 压缩图片 在根目录执行命令npm install gulp@3.9.1 --save安装gulp 接着执行命令npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save或者npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save-dev (区别是： -dev安装的包会保存至package.json的devDependencies节点，是存放开发所依赖的包；–save将配置信息保存在package.json中的dependencies节点，是程序正常运行所需要安装的依赖) 打开package.json文件若有:123456 &quot;gulp&quot;: &quot;^3.9.1&quot;,&quot;gulp-htmlclean&quot;: &quot;^2.7.22&quot;,&quot;gulp-htmlmin&quot;: &quot;^4.0.0&quot;,&quot;gulp-imagemin&quot;: &quot;^4.1.0&quot;,&quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,&quot;gulp-uglify&quot;: &quot;^3.0.1&quot;, 表明安装依赖成功 创建gulpfile.js文件在根目录下，新建gulpfile.js文件，文件内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);var imagemin = require(&apos;gulp-imagemin&apos;); // 压缩htmlgulp.task(&apos;minify-html&apos;, function() &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩cssgulp.task(&apos;minify-css&apos;, function() &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss(&#123; compatibility: &apos;ie8&apos; &#125;)) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩jsgulp.task(&apos;minify-js&apos;, function() &#123; return gulp.src(&apos;./public/js/**/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩图片gulp.task(&apos;minify-images&apos;, function() &#123; return gulp.src(&apos;./public/images/**/*.*&apos;) .pipe(imagemin( [imagemin.gifsicle(&#123;&apos;optimizationLevel&apos;: 3&#125;), imagemin.jpegtran(&#123;&apos;progressive&apos;: true&#125;), imagemin.optipng(&#123;&apos;optimizationLevel&apos;: 7&#125;), imagemin.svgo()], &#123;&apos;verbose&apos;: true&#125;)) .pipe(gulp.dest(&apos;./public/images&apos;))&#125;);// 默认任务gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-images&apos;]) （注意：若gulp版本为4以上会运行该代码会报错，因为gulp4不能像以前上面代码那样传递一个依赖任务列表。） 最后在根目录执行命令gulp 此时代码已经成功压缩了。 站点图片添加水印给站点上的图片加上水印，比如把自己博客的网址加上去，这样比较利于保护自己的原创及版权，还能够让别人采集后，可以起到宣传作用。 注册七牛云，使用其对象存储服务 这里还有很多处理方式，比如缩放方式、裁剪、增加图片水印、设置输出格式，使用起来非常方便！]]></content>
      <tags>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客优化--添加个人音乐播放器]]></title>
    <url>%2Fblog-07.html</url>
    <content type="text"><![CDATA[我之前打算用Vue框架来写一个网易云音乐webApp，但感觉自己功底不够，等修炼多一段时间在尝试写。现在有了这个个人博客，所以就写了一个简单的音乐播放器插件，放在博客侧边栏，歌曲数据是我网易云音乐最近播放记录，下面是搭建过程。 先上效果图 侧边栏空间有限，一次只显示四首歌曲，点击刷新可随机显示4四首最近播放记录的音乐。 注意：移动端暂时无法显示播放器；可点击这里访问404页面 如图： 前记虽然可以直接在博客上面添加网易云音乐站外播放外链，但是只能播放一首歌曲，而且不能用js操控播放； 所以就放弃这种方案，直接自己动手搭建一个音乐播放插件，可以在其他地方直接调用。 技术栈： HTML5 (使用HTML5标签 data- 属性绑定数据) CSS3 (使用CSS3做音乐播放动画) jQuery 开启后台服务器网易云接口是使用github上的一个NodeJs API，用git将仓库代码下载到本地服务器上，在git bash使用命令node app.js即可开启接口服务 编辑静态页面及用js获取数据显示 在博客根目录找到themess文件夹，找到自己所需的地方编辑页面代码 我选择添加在博客侧边栏，HTML代码如下: 123456789101112131415161718192021222324252627282930&lt;div class=&quot;my-music&quot;&gt; &lt;!-- 渐变条 --&gt; &lt;span class=&quot;hr&quot;&gt;&lt;/span&gt; &lt;div class=&quot;my-music_title&quot;&gt; &lt;p&gt;&lt;i class=&quot;fa fa-headphones&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;最近在听&lt;/p&gt; &lt;p class=&quot;reflash-music&quot;&gt;刷新&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;music-player&quot;&gt; &lt;div class=&quot;music-player_logo&quot;&gt; &lt;/div&gt; &lt;div class=&quot;music-player_txt ellipsis&quot;&gt;音乐播放器&lt;/div&gt; &lt;div class=&quot;music-player-control&quot;&gt;&lt;/div&gt; &lt;audio src=&quot;&quot; hidden&gt;&lt;/audio&gt; &lt;/div&gt; &lt;ul class=&quot;my-music_list&quot;&gt; &lt;!-- 播放动画 --&gt; &lt;div class=&quot;my-music_list-current preloader_1&quot;&gt; &lt;span class=&quot;preloader_1-m1&quot;&gt;&lt;/span&gt; &lt;span class=&quot;preloader_1-m2&quot;&gt;&lt;/span&gt; &lt;span class=&quot;preloader_1-m3&quot;&gt;&lt;/span&gt; &lt;span class=&quot;preloader_1-m1&quot;&gt;&lt;/span&gt; &lt;span class=&quot;preloader_1-m2&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/ul&gt; &lt;span class=&quot;hr&quot;&gt;&lt;/span&gt;&lt;/div&gt; CSS代码如下 123456789.hr &#123; display: block; margin: 10px 0 0; height: 3px; border: none; background-color: #ddd; box-sizing: border-box; background-image: repeating-linear-gradient(-45deg, #69bce1, #69bce1 4px, transparent 4px, transparent 8px);&#125; (使用CSS3 linear-gradient做的一个渐变条，放在播放器上下两端) 123456789101112131415161718192021222324252627282930.preloader_1 &#123; width: 30px; height: 20px; margin: 0;&#125;.preloader_1 span &#123; float: left; width: 3px; height: 20px; background-color: blue; margin-left: 2px;&#125;.preloader_1-m1 &#123; animation: living .8s linear infinite; animation-delay: -1.1s;&#125;.preloader_1-m2 &#123; animation: living .8s linear infinite; animation-delay: -1.3s;&#125;.preloader_1-m3 &#123; animation: living .8s linear infinite; animation-delay: -1.6s;&#125;@keyframes living &#123; 0% &#123; transform: scaleY(1); transform-origin: 0 20px; background:#9b59b6; &#125; 50% &#123; transform: scaleY(.3); transform-origin: 0 20px; background:#69bce1; &#125; 100% &#123; transform: scaleY(1); transform-origin: 0 20px; background:#9b59b6;&#125;&#125; (使用CSS3 animation做一个音乐播放动效)其他css代码比较简单就不放上了。 js 逻辑代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940//使用立即执行函数，可防止音乐播放器的变量及函数名污染全局变量(function () &#123; // 音乐播放器局部变量 var allMusic = [], musicLis = [], ifPlay = false, ids = [], currentPlay = 0, ramdomCount = 0; getMusicData(); // 监听点击 function spyClick() &#123; ... &#125; // 播放音乐 function playMusic() &#123; ... &#125; // 获取数据 function getMusicData() &#123; ... &#125; // 随机显示四首播放音乐 function showRamdomData() &#123; ... &#125; // 处理根据多个音乐id获取的音乐url数据顺序不一样的问题 function resetList(arr, target) &#123; ... &#125;&#125;)($) 总结 做完这个音乐播放器感觉有了一些经验了，等有时间尝试做一个网易云音乐webApp。 待解决：目前只能通过HTTP协议访问本博客才能获取音乐数据，HTTPS访问会有跨域请求问题，计划使用jQuery的jsonp请求回调解决这个问题。]]></content>
      <tags>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人作品--美图屋]]></title>
    <url>%2Fblog-05.html</url>
    <content type="text"><![CDATA[学习了一段时间前端，找不到什么项目来练手，自己对后端了解的不多，所以就在网上找一些数据接口来开发了这个项目，这个项目用到了360壁纸、必应每日美图、金山词霸开发者平台的数据api。 功能 在线美图网站，多种壁纸分类，支持多种图片尺寸下载 技术栈： jQuery （用jQuery来获取DOM; ajax跨域请求;） PHP （用PHP集中判断并发送请求，实现跨域请求） 服务器 （在服务器上搭建nginx + PHP环境，部署上线） 响应式 （适配PC端及移动端） 传送门 页面展示：]]></content>
      <tags>
        <tag>作品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人作品--小米9宣传页面]]></title>
    <url>%2Fblog-06.html</url>
    <content type="text"><![CDATA[最近小米9手机发布，感觉还不错，个人比较喜欢小米MIUI系统，所有就做了这个页面。 技术栈 HTML5 / CSS3 （主要用来做页面动效交互） PC端 （本页面不适配移动端） 传送门 页面展示： 待解决问题: 暂时不适配移动端 某些浏览器不能显示全部内容，可能是不兼容CSS3动画属性]]></content>
      <tags>
        <tag>作品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人作品--海报]]></title>
    <url>%2Fblog-03.html</url>
    <content type="text"><![CDATA[我从大一开始就喜欢折腾一些软件或者有关页面设计的东西，看到网上别人做的海报很酷炫，所以自学了PPT、PS,做了一些简单的海报（可能不算是海报吧，自己瞎折腾），感觉自己还是缺少了一些审美，记录在这里。]]></content>
      <tags>
        <tag>作品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人作品--微生活Lite(小程序)]]></title>
    <url>%2Fblog-04.html</url>
    <content type="text"><![CDATA[之前小程序很火，感觉开发起来也比较方便，所以就借了本书学习开发小程序，做出了这个小程序，感觉小程序和Vue有点类似，都有生命周期（小程序钩子相对简单）、数据双向绑定、组件通信。 功能 微豆瓣 （实时豆瓣各类榜单，提供豆瓣评分和评论信息，支持搜索，支持发表影评） 微天气 （实时天气信息，支持查看不同地点天气） 微相册 （类似微信朋友圈的相册，记录生活的点滴） 图片展示 技术栈：小程序 | 云开发 扫码体验：]]></content>
      <tags>
        <tag>作品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小白的第一篇博客]]></title>
    <url>%2Fblog-01.html</url>
    <content type="text"><![CDATA[折腾了几天，终于把博客弄好了，从大二暑假开始入坑前端开发，一直想做一个属于自己的博客网站，主要是用来记录学习过程中遇到的技术难题和踩过的坑，同时还可以记录自己的成长经历，以后看看也许有所感触吧。万事开头难，现在总算迈出第一步，希望以后能坚持写博客。 博客的搭建本来想自己动手开发一个博客，但最近有点忙，加上想找一份实习，要去准备。所以就用了hexo + github pages搭建了这个博客，搭建过程中也踩了不少坑，网上有很多搭建过程文章，但是不够详细或者有错误，等有时间我再总结一下搭建过程。 未来打算 及时总结，随时记录理解（之前学习过程中，没有注重总结，有些知识学了不久就忘） 写有深度的博客，做一些优秀项目（这点有待努力，感觉自己还是前端小白，要多学习多总结） 找一份实习（毕竟自己自学缺少一些方向和实践） 持续不断地学习，近期打算深度学习Vue开发一个项目]]></content>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
</search>
